{"version":3,"sources":["p5/mandelbrot.js","App.js","serviceWorker.js","index.js"],"names":["mandelbrotSketch","p","maxIterations","easedMaxIterations","M","imBounds","createVector","reBounds","undefined","pixels","allPixelsCoordsGenerator","regenerator_default","a","mark","row","col","wrap","_context","prev","next","height","width","stop","mapToBounds","re","map","x","y","im","getIterationCount","cRe","cIm","c","z","i","pow","add","setup","createCanvas","window","innerWidth","innerHeight","P2D","frameRate","angleMode","DEGREES","background","rectMode","CENTER","colorMode","HSB","dimRatio","reWidth","console","log","initBounds","Array","_mapToBounds","nIterations","color","initPixelGrid","myCustomRedrawAccordingToNewPropsHandler","props","draw","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_ref2","value","offsetColor","stroke","point","err","return","App","p5Element","state","rotation","render","react_default","createElement","className","ref","e","_this","style","display","flexGrow","dist_default","sketch","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7a83a998.chunk.js","sourcesContent":["import * as M from 'mathjs';\n\nexport const mandelbrotSketch = p => {\n\n    let lessThanInfinity = 100;\n    let maxIterations = 200;\n    let colorOffset = 0;\n    let colorEaseExponent = 2/3;\n    let easedMaxIterations = M.pow(maxIterations, colorEaseExponent);\n    let sqrtMaxIterations = M.sqrt(maxIterations);\n\n\n    let imBounds = p.createVector(-1.2, 1.2);\n    let reBounds = undefined;\n    let reMidPoint = -0.5;\n\n    let pixels = [];\n\n    const allPixelsCoordsGenerator = function* () {\n        for (let row = 0; row < p.height; row++) {\n            for (let col = 0; col < p.width; col++) {\n                yield pixels[row][col];\n            }\n        }\n    };\n\n    const mapToBounds = (col, row) => {\n        return {\n            re: p.map(col, 0, p.width, reBounds.x, reBounds.y),\n            im: p.map(row, 0, p.height, imBounds.x, imBounds.y)\n        }\n    };\n\n    const initPixelGrid = () => {\n        for (let row = 0; row < p.height; row++) {\n            pixels[row] = new Array(p.width);\n            for (let col = 0; col < p.width; col++) {\n                const { re, im } = mapToBounds(col, row);\n                const nIterations = getIterationCount(re, im);\n                // const color = p.map(M.sqrt(nIterations), 0, sqrtMaxIterations, 0, 255);\n                const color = p.map(M.pow(nIterations, colorEaseExponent), 0, easedMaxIterations, 0, 255);\n                pixels[row][col] = {\n                    col, row,\n                    re, im,\n                    nIterations,\n                    color\n                };\n            }\n        }\n    };\n\n    const getIterationCount = (cRe, cIm) => {\n        let c = M.complex(cRe, cIm);\n        let z = M.complex(0, 0);\n        for (let i = 0; i < maxIterations; i++) {\n            z = z.pow(2).add(c);\n            if (M.square(z.re) + M.square(z.im) > lessThanInfinity) {\n            // if (z.re * z.re + z.im * z.im > 100) {\n                return i;\n            }\n        }\n        return maxIterations;\n    };\n\n    const initBounds = () => {\n        // Must be called after p.createCanvas for p.height/width to have been set correctly\n        const dimRatio = p.width / p.height;\n        const reWidth = (imBounds.y - imBounds.x) * dimRatio;\n        reBounds = p.createVector(reMidPoint - reWidth / 2, reMidPoint + reWidth / 2);\n\n        console.log('Re axis: ', reBounds.x, ' - ', reBounds.y);\n        console.log('Im axis: ', imBounds.x, ' - ', imBounds.y);\n        console.log('Pixel dimensions: ', window.innerWidth, 'x', window.innerHeight-100);\n    };\n\n    p.setup = function () {\n        p.createCanvas(window.innerWidth, window.innerHeight-100, p.P2D);\n        p.frameRate(0.1);\n        p.angleMode(p.DEGREES);\n        p.background(0);\n        p.rectMode(p.CENTER);\n        p.colorMode(p.HSB);\n        initBounds();\n        initPixelGrid();\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n        if (props.maxIterations){\n            maxIterations = props.maxIterations;\n            console.log('Set maxIterations: ' + maxIterations);\n        }\n    };\n\n    p.draw = function () {\n        p.background(0);\n\n        for (const { col, row, color } of allPixelsCoordsGenerator()) {\n            const offsetColor = (color + colorOffset) % 255;\n            p.stroke(offsetColor, p.map(color, 0, 255, 100, 200), 255-color);\n            p.point(col, row);\n        }\n    };\n};","import React, { Component } from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\n\n// import { demoSketch } from './p5';\nimport { mandelbrotSketch } from './p5/mandelbrot';\n\nimport './App.css';\n\n\nclass App extends Component {\n  p5Element = null;\n  state = {\n      rotation: 45\n  };\n  render = () => {\n    return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n              Mandelbrot Set Visualization\n           {/*Set a number ({ this.state.rotation }°): */}\n              {/*<input type={\"range\"} min={-360} max={360} value={this.state.rotation} onChange={(e) => this.setState({rotation: Number(e.target.value)})}/>*/}\n          </header>\n          <div ref={e => this.p5Element = e} style={{\n            display: 'flex',\n            flexGrow: 1,\n          }}>\n            <P5Wrapper sketch={mandelbrotSketch} rotation={this.state.rotation} />\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}