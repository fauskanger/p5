{"version":3,"sources":["p5/mandelbrot.js","App.js","serviceWorker.js","index.js"],"names":["mandelbrotSketch","p","maxIterations","easedMaxIterations","M","startImBounds","createVector","startReBounds","imBounds","undefined","reBounds","pixels","allPixelsCoordsGenerator","regenerator_default","a","mark","row","col","wrap","_context","prev","next","height","width","stop","mapToBounds","re","map","x","y","im","getIterationCount","cRe","cIm","c","z","i","pow","add","setup","createCanvas","window","innerWidth","innerHeight","P2D","frameRate","angleMode","DEGREES","background","rectMode","CENTER","colorMode","HSB","widthByHeight","mag","reWidth","imHeight","console","log","initBounds","Array","_mapToBounds","nIterations","color","initPixelGrid","myCustomRedrawAccordingToNewPropsHandler","props","draw","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_ref2","value","offsetColor","stroke","point","err","return","App","p5Element","state","rotation","render","react_default","createElement","className","ref","e","_this","style","display","flexGrow","dist_default","sketch","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.584c6347.chunk.js","sourcesContent":["import * as M from 'mathjs';\n\nexport const mandelbrotSketch = p => {\n\n    let lessThanInfinity = 16;\n    let maxIterations = 200;\n    let colorOffset = -20;\n    let colorEaseExponent = 0.55;\n    let easedMaxIterations = M.pow(maxIterations, colorEaseExponent);\n    // let sqrtMaxIterations = M.sqrt(maxIterations);\n\n\n    let startImBounds = p.createVector(-1.2, 1.2);\n    let startReBounds = p.createVector(-1.85, 0.6);\n    let imBounds = undefined;\n    let reBounds = undefined;\n    let reMidPoint = -0.5;\n    let imMidPoint = 0;\n\n    let pixels = [];\n\n    const allPixelsCoordsGenerator = function* () {\n        for (let row = 0; row < p.height; row++) {\n            for (let col = 0; col < p.width; col++) {\n                yield pixels[row][col];\n            }\n        }\n    };\n\n    const mapToBounds = (col, row) => {\n        return {\n            re: p.map(col, 0, p.width, reBounds.x, reBounds.y),\n            im: p.map(row, 0, p.height, imBounds.x, imBounds.y)\n        }\n    };\n\n    const initPixelGrid = () => {\n        for (let row = 0; row < p.height; row++) {\n            pixels[row] = new Array(p.width);\n            for (let col = 0; col < p.width; col++) {\n                const { re, im } = mapToBounds(col, row);\n                const nIterations = getIterationCount(re, im);\n                // const color = p.map(M.sqrt(nIterations), 0, sqrtMaxIterations, 0, 255);\n                const color = p.map(M.pow(nIterations, colorEaseExponent), 0, easedMaxIterations, 0, 255);\n                pixels[row][col] = {\n                    col, row,\n                    re, im,\n                    nIterations,\n                    color\n                };\n            }\n        }\n    };\n\n    const getIterationCount = (cRe, cIm) => {\n        let c = M.complex(cRe, cIm);\n        let z = M.complex(0, 0);\n        for (let i = 0; i < maxIterations; i++) {\n            z = z.pow(2).add(c);\n            if (M.square(z.re) + M.square(z.im) > lessThanInfinity) {\n            // if (z.re * z.re + z.im * z.im > 100) {\n                return i;\n            }\n        }\n        return maxIterations;\n    };\n\n    const initBounds = () => {\n        // Must be called after p.createCanvas for p.height/width to have been set correctly\n        const widthByHeight = p.width / p.height;\n        if (widthByHeight > startImBounds.mag() / startReBounds.mag()) {\n            // Compute width from height\n            imBounds = startImBounds;\n            const reWidth = (imBounds.y - imBounds.x) * widthByHeight;\n            reBounds = p.createVector(reMidPoint - reWidth / 2, reMidPoint + reWidth / 2);\n        } else {\n            // Compute height from width\n            reBounds = startReBounds;\n            const imHeight = (reBounds.y - reBounds.x) / widthByHeight;\n            imBounds = p.createVector(imMidPoint - imHeight / 2, imMidPoint + imHeight / 2);\n        }\n\n        console.log('Re axis: ', reBounds.x, ' - ', reBounds.y);\n        console.log('Im axis: ', imBounds.x, ' - ', imBounds.y);\n        console.log('Pixel dimensions: ', window.innerWidth, 'x', window.innerHeight-100);\n    };\n\n    p.setup = function () {\n        p.createCanvas(window.innerWidth, window.innerHeight-100, p.P2D);\n        p.frameRate(0.1);\n        p.angleMode(p.DEGREES);\n        p.background(0);\n        p.rectMode(p.CENTER);\n        p.colorMode(p.HSB);\n        initBounds();\n        initPixelGrid();\n\n    };\n\n    p.myCustomRedrawAccordingToNewPropsHandler = function (props) {\n        if (props.maxIterations){\n            maxIterations = props.maxIterations;\n            console.log('Set maxIterations: ' + maxIterations);\n        }\n    };\n\n    p.draw = function () {\n        p.background(0);\n\n        for (const { col, row, color } of allPixelsCoordsGenerator()) {\n            const offsetColor = (color + colorOffset) % 255;\n            p.stroke(offsetColor, p.map(color, 0, 255, 100, 200), 255-color);\n            p.point(col, row);\n        }\n    };\n};","import React, { Component } from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\n\n// import { demoSketch } from './p5';\nimport { mandelbrotSketch } from './p5/mandelbrot';\n\nimport './App.css';\n\n\nclass App extends Component {\n    p5Element = null;\n    state = {\n        rotation: 45\n    };\n    render = () => {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"title\">\n                        Mandelbrot Set Visualization\n                    </div>\n                    <div className=\"controls\">\n                        {/*Set a number ({ this.state.rotation }°):*/}\n                        {/*<input type={\"range\"} min={-360} max={360} value={this.state.rotation} onChange={(e) => this.setState({rotation: Number(e.target.value)})}/>*/}\n                    </div>\n                </header>\n                <div ref={e => this.p5Element = e} style={{\n                    display: 'flex',\n                    flexGrow: 1,\n                }}>\n                    <P5Wrapper sketch={mandelbrotSketch} rotation={this.state.rotation} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}